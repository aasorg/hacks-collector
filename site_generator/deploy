#!/bin/bash

# this conditional assignment means you can do things like:
# GH_REMOTE=myremote ./deploy
# to set these to something other than the default

# branches and remote for pushing to github
: ${GH_PAGESBRANCH=gh-pages}
: ${GH_REMOTE=origin}

# if not interactive, automatically "yes" things but don't show anything
: ${INTERACTIVE=true}
: ${CURRENT_BRANCH_NAME="$(git symbolic-ref --quiet --short HEAD)"}

if [ -z "$CURRENT_BRANCH_NAME" ]; then
    echo "Could not determine current branch.  Cannot continue with deployment."
    exit 1
fi

giveup_message () {
    echo "\n"
    echo "You're now in an orphaned test deploy branch."
    echo "To get back to normal you can run the following:"
    echo "    git checkout -f $CURRENT_BRANCH_NAME"
    echo "    git clean -f"
    echo "    git branch -D $GH_PAGESBRANCH"
}

promptifinteractive () {
    # first argument is message, second is non-interactive answer, all others passed to read
    if [ "$INTERACTIVE" = true ] ; then
        read -p "$1" -r "${@:3}"
    else
        echo $1 $2
        REPLY=$2
    fi
}

echo "*****************************************************************"
echo "WARNING! This script will remove the local $GH_PAGESBRANCH branch,"
echo "build the hack list into a static site, then push to remote gh-pages"
echo "located here: $GH_REMOTE/gh-pages."
echo
echo "Make sure you have no uncommitted changes in your current branch"
echo "as these may be overwritten!"
echo
promptifinteractive "Are you sure you want to do this? [y/N] " y -n 1
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then

    # then convert YAML files to HTML
    OUTPUT=`python site_generator/static_generator.py`
    if [[ $? != 0 ]]
    then
        echo "Error generating static site, aborting deployment.";
        exit;
    fi

    # remove the old $GH_PAGESBRANCH branch
    OUTPUT=`git branch -D $GH_PAGESBRANCH`
    if [[ $? != 0 ]]
    then
        echo "Error deleting branch '$GH_PAGESBRANCH'. But that *might* be OK if it doesn't exist, so proceed on";
    fi

    # Create a new "orphaned" branch -- we don't need history for
    # the built products
    git checkout --orphan $GH_PAGESBRANCH

    # Copy the built files to a tmp location
    mv site_generator/html _tmp

    # This will delete all of the git-managed files here
    git rm -rf .

    # Now copy the html back into here
    cp -R _tmp/* .
    rm -rf _tmp

    # this is *critical* for security, as otherwise the deploy key gets checked into git and then sent up to the gh-pages branch
    echo "deploy_key" >> .gitignore 

    git add *
    git commit -m "Generated from sources"

    promptifinteractive "Would you like to preview the rendered HTML? [y/N] " N -n 1
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo
        echo
        open index.html
    else
        echo
    fi

    promptifinteractive "Are you sure you want to push to the remote branch '$GH_PAGESBRANCH' on the remote '$GH_REMOTE'? [y/N] " y -n 1
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo
        git ls-remote --exit-code $GH_REMOTE > /dev/null 2> /dev/null
        while [[ $? != 0 ]]
        do
            promptifinteractive "Could not communicate with remote '$GH_REMOTE'.  Enter an alternate remote name (or 'quit' to give up):" quit
            if [[ $REPLY = "quit" ]]; then
                giveup_message
                exit
            fi
            GH_REMOTE=$REPLY

            git ls-remote --exit-code $GH_REMOTE > /dev/null 2> /dev/null
        done

        echo "Pushing to '$GH_PAGESBRANCH' on remote '$GH_REMOTE'"
        if [ "$INTERACTIVE" = true ] ; then
            git push -f $GH_REMOTE $GH_PAGESBRANCH
        else
            # we do this with nothing to stdout because otherwise it might reveal secret tokens
            git push -f --quiet $GH_REMOTE $GH_PAGESBRANCH >/dev/null 2>&1
            echo "Silent push finished."
        fi

        git checkout -f $CURRENT_BRANCH_NAME
        git clean -f
        git branch -D $GH_PAGESBRANCH
    else
        giveup_message
    fi
fi
